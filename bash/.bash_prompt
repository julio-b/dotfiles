ESC=$'['
END_ESC=m
NOPRINT='\['
END_NOPRINT='\]'
WRAP="$NOPRINT$ESC"
END_WRAP="$END_ESC$END_NOPRINT"
RESET="${WRAP}0${END_WRAP}"
RESET_BG="${WRAP}49${END_WRAP}"
NORMAL="${WRAP}21${END_WRAP}"
BOLD="${WRAP}1${END_WRAP}"

function __fg_color {
    printf "%s" "${WRAP}38;5;${1}${END_WRAP}"
}

function __bg_color {
    printf "%s" "${WRAP}48;5;${1}${END_WRAP}"
}

BLACK=$(__fg_color 0);
BLUE=$(__fg_color 33);
CYAN=$(__fg_color 37);
GREEN=$(__fg_color 64);
ORANGE=$(__fg_color 166);
PURPLE=$(__fg_color 125);
RED=$(__fg_color 124);
VIOLET=$(__fg_color 61);
WHITE=$(__fg_color 15);
YELLOW=$(__fg_color 136);

prompt_git_branch() {
	local branchName='';
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";
		printf "%s" "î‚ ${branchName}"
	else
		return;
	fi;
}

prompt_git_status() {
	local s='';
	if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then
		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
			if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
				git update-index --really-refresh -q &> /dev/null;
			fi;
			# Check for uncommitted changes in the index.
			if ! git diff --quiet --ignore-submodules --cached; then
				s+='+';
			fi;
			# Check for unstaged changes.
			if ! git diff-files --quiet --ignore-submodules --; then
				s+='!';
			fi;
			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;
			# Check for stashed files.
			if git rev-parse --verify refs/stash &>/dev/null; then
				s+='^';
			fi;
		fi;
		[ -n "${s}" ] && s=" [${s}]";
		printf "%s" "${s}"
	else
		return;
	fi;
}

function __prompt_ps1 {
	local usercolor='';
	local hostcolor='';
	local usersh='$';
	local stat='';

	if [[ "${USER}" == "root" ]]; then
		usercolor=${RED}
		usersh='#'
	else
		usercolor=${BLUE}
	fi;

	if [[ "${SSH_TTY}" ]]; then
		hostcolor=${RED}
	else
		hostcolor=${CYAN}
	fi;

	printf "%s" "${BOLD}"
	printf "%s" "${usercolor}\u"
	printf "%s" "${WHITE}@"
	printf "%s" "${hostcolor}\h"
	printf "%s" "${GREEN} \w "
	if stat=$(prompt_git_branch); then
		printf "%s" "${VIOLET}${stat}${BLUE}$(prompt_git_status)"
	fi
	printf "%s" "${RESET_BG}${WHITE}${usersh} "
	printf "%s" "${RESET}${RESET_BG}"
}

function __prompt {
	PS1="$(__prompt_ps1)"
	PS2="${YELLOW}â†’ ${RESET}${RESET_BG}";
}

if [[ ! "$PROMPT_COMMAND" == *__prompt* ]]; then
	case $(tty) in
		/dev/tty[0-9]*)
			;;
		*)
			PROMPT_COMMAND='__prompt;'$'\n'"$PROMPT_COMMAND" ;;
	esac
fi

# vim: ft=sh
